// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt      DateTime       @default(now())

  accounts       Account[]
  sessions       Session[]
  ideology       IdeologyUsers[]
  sentEmails     SentEmail[]
  idea          Idea[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ideology {
  id                 String          @id @default(cuid())
  name               String
  slug               String          @unique
  logo               String?

  users              IdeologyUsers[]
  invites            IdeologyInvite[]
  usage              Int             @default(0)
  usageLimit         Int             @default(1000)
  plan               String          @default("free")
  stripeId           String?         @unique // Stripe subscription ID
  billingCycleStart  Int?            // day of the month when the billing cycle starts
  
  sentEmails         SentEmail[]
  idea              Idea[]
  tags               Tag[]

  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model IdeologyInvite {
  email     String
  expires   DateTime
  ideology   Ideology  @relation(fields: [ideologyId], references: [id], onDelete: Cascade)
  ideologyId String
  createdAt DateTime @default(now())

  @@unique([email, ideologyId])
  @@index([ideologyId])
}

model IdeologyUsers {
  id        String   @id @default(cuid())
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  ideology   Ideology  @relation(fields: [ideologyId], references: [id], onDelete: Cascade)
  ideologyId String

  @@unique([userId, ideologyId])
  @@index([ideologyId])
}

enum EmailType {
  firstDomainInvalidEmail
  secondDomainInvalidEmail
  firstUsageLimitEmail
  secondUsageLimitEmail
}

model SentEmail {
  id        String    @id @default(cuid())
  type      EmailType
  createdAt DateTime  @default(now())
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  ideology   Ideology?  @relation(fields: [ideologyId], references: [id], onDelete: Cascade)
  ideologyId String?

  @@index([userId])
  @@index([ideologyId])
}

model Idea {
  id        String    @id @default(cuid())
  title       String? 
  description String? @db.VarChar(280)
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  // Ideology that the idea belongs to
  ideology       Ideology? @relation(fields: [ideologyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ideologyId     String?
  // Idea metadata
  clicks      Int      @default(0) // number of clicks
  publicStats Boolean  @default(false) // whether to show public stats or not
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Idea tags
  tag   Tag?    @relation(fields: [tagId], references: [id])
  tagId String?

  @@index(ideologyId)
  @@index(tagId)
  @@index(createdAt(sort: Desc))
  @@index(clicks(sort: Desc))
  @@index(userId)
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ideology   Ideology  @relation(fields: [ideologyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ideologyId String
  idea     Idea[]

  @@unique([name, ideologyId])
  @@index(ideologyId)
}